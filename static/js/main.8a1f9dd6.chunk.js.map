{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,YAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACM,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,mCAAOL,EAAMI,QAAQE,KAArB,OACA,4BAAIN,EAAMI,QAAQG,aCJZC,EAAW,SAACR,GACzB,OAAO,sBAAKC,UAAU,YAAf,cACHD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHvCM,G,YAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAYC,EAAf,EAAeA,aAAf,OAC1B,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAcA,EAAcG,SAAUF,MCqC/DG,E,kDAnCb,aAAc,IAAD,8BACT,gBAYJH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZnC,EAAKC,MAAO,CACVb,SAAU,GACVU,YAAa,IAJN,E,gEAOO,IAAD,OACfI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAOlC,IAAD,EACuBC,KAAKN,MAA5Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACXU,EAAkBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBACnG,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAEvB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA5BRI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8a1f9dd6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\n\r\nexport const Card = (props) => (\r\n  <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n       <h2> { props.monster.name } </h2>\r\n       <p>{props.monster.email}</p>\r\n    </div>\r\n  )","import React from 'react';\r\nimport './card-list.styles.css'\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardList = (props) => {\r\nreturn <div className=\"card-list\"> {\r\n    props.monsters.map(monster => <Card key={monster.id} monster={monster}/>)\r\n  }</div>;\r\n}\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport  const SearchBox = ({ placeholder,handleChange }) => (\r\n<input className='search' type=\"search\" placeholder={ placeholder } onChange={handleChange}></input>\r\n\r\n)","import React, { Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component'\nimport './App.css';\nimport {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends Component {\n  constructor(){\n      super();\n      this.state ={\n        monsters: [],\n        searchField: ''\n      };\n  }\n  componentDidMount(){\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render() {\n    const {monsters, searchField}=this.state;\n    const filteredMonsters= monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className='App'>\n        <h1> Monsters Rolodex </h1>\n        <SearchBox\n          placeholder=\"Search Monsters\"\n          handleChange={this.handleChange}\n        />\n      <CardList monsters={filteredMonsters} ></CardList>\n       \n      </div>\n      );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}